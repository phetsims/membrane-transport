/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7cMSxA9DQSgMP/8AQAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+3LEbQPAAAGkAAAAIAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;