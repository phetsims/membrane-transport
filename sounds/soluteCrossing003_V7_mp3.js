/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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BiQGSolUoAgqVGV/z2RnWaiREBqTrsm4EiGRclfSumlEIT51A0xsC04DJKoJtLpwMuAJCLT0tGc9+cSJpoRU9VCLIkRCe4VEtERNcY2ysiaVFLNKgz1tygs/hYm/8ritNChcsikqGkS4pSRNFQy0VDLKRE1uK4sKjf/7cMTxgEsUkTusZScyui+kaael9hCKRSWZVgiuOEQqwiBI0mKTKQWJes1ccWndSlLf/quS8lWRSdDIpYRKoQqSyKu30iJt6uETeLIpELPv/+Mt/jGNkLXIQRJfvWFKTEFNRTMuMTAwqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqgZZbWnKtVmVCcUYYBqpjJGZGRKQSaIBiBmllEmaIbMZP55JqVmxhFlRoHwZsBPBuOs5ssWRpyMpnUJRlqIZj8IxgwBQsA//+3LE7gAKMGEpTKSu8r+z4F2MpR8AuJTuEpSmUVQFQ/S8Xu5lHRT0ZlUeDiDsqHZjKlCoDBkdv/9Hb/vryp//9bsi0/zKzs5UX9UVf/+VP1/3KGDBxnqFvFzPdr/66kxBTUUzLjEwMKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7cMS1g9HpboePdEfAAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo=';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;