/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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SLSQiKjFQAZZFjbYCbKrAuUtIX7SgWcyVhrMmfsoae5rrQ7NSh52gqXIqoChgJUAQhQIo6JVp0EwggJZ4QDFRCMw5EccDTgoA0ceCjkoKwFjTI2IMfWqu5gLMl9MbZAztoDJmctKbi3Fqjc3IYuyViTKWZMyaq3Br7eNs7rtQCMjAjJBcSiohLFjpRGw0zJ/mycaVcRs07Xm1JxZl5qJE43/+3LExgAKJW8CbBhF0YEzYfRkF48o9BaKRI0UeYmpcycXCaKRpxxZiakiJxppR6CyJI0oULBAsMFAooSBiCYwcEgwkCAjyCY0kROLLMTUSIiizDByUrTMsVp9amyvaZUQLTDVBisNVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7cMT/gAfkAwtABEAztbQMWYSbwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU=';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;