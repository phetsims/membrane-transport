/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,//twxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAMAAAP6wAVFRUVFRUVFSoqKioqKioqQEBAQEBAQEBVVVVVVVVVVVVqampqampqaoCAgICAgICAlZWVlZWVlZWVqqqqqqqqqqrAwMDAwMDAwNXV1dXV1dXV1erq6urq6urq//////////8AAAA8TEFNRTMuMTAwAc0AAAAAAAAAABRgJAUYQgAAYAAAD+vyhinGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7cMQAAAdQG0e0kQAzYKzuNzOCAgAAAHG3JI5ugQQsjC4Jk8hWK29g+alAQOH4Pg+BAQBAMdYfxACE/8QAgcrP/g+H///B8P5QEOsP//lHEWkjKq0mNDmclmcyISQdR4AAn5g1gWILMRsHywKWvWkYqIcmGAIIFTsLO52hmeScCvV2xstwIhxtBQRxVA/KTL9w/3yZQctqi1FnxKFQI77/2pqWIb0GLkP4/0MP/IIf269Pbp6CWLrd+2/kgmL8opqWMxSKU9+B7MXzhyMSyH5fpnNN2lrVnCi9S9ewsZY26CWbXQ7k583lYdWzrKrFpZKu65hu3P8/9RentuQ/ksl9P2Nxurjr6tLrLLH//////////4u7kOV4ocIH5dgKkf///4Y//BValHFDICInClEd4wQc4hMzpFj/+3LECIAKvHt3/PeAImSbKA3MwbrKhFE8Y1ahqlQk5nyWcmGHhQUfx2J5mBEvGGEntx4mfmtZv///A1v/+jyDOYQ5QNGvyPq1HtTxKCsNVHiz4lWdyvEX/EQAAckiERhEfGQRUZLXhlcqGWVoahxxspim9kuYVCShy7kZTALEAQKNsw0YjEXFnxw04nQAEaMBWeBASzJCEYwKgBonJxGEeeXaGghELjMggbv/k7abHO/BksZ0XuMuQWGsxEdEfoFCiIAAgII1QkIbWi6sph0BWBri2sWRw2/qSWj3Uk/6XSTRmL6w0yVcWEQNB3Op+v/1PBUAAOOYIDIwMBwxaII2KY0cGMwTNs3NSw8aPQycDYoB0ECwYJgkYTgyZXo+DlgMNgvMYgLIgUAyoBTDhQjFOpOBClXjc3qISP/7cMQjgBMclS513IAR/BMqdzbyQhCWjSITBIZPJJt5gdDEKOd1TjBoRbErMvgYFfSRswGkk8bbiaU4IVUJCFhpoIOcsSXJTB0ZSQ4EskFDvZOKzsWrO9//c///b+zX/zzeinOINSQAAAKKpUKgLBbFj12/wqNG3kAoRnCqRfVox+DiIBE8k1BgIYyIPcClVl5qZ4wEwoRa4CkXBcCxowfTWf5c1AJqHyzluVaEnDK7CrmhjMOV7I3rlIIWmTdSJwIcikfllwpZki5H/fXTj208X28auj+6mvfZU7r+KU/N/o/3qxYplQJkMg9XqkNouPy2NqomApWBhKZsO4fiDKKRpKjL/gYb1Rxxl10YWsMkdwmmxROumB26LcyXav85blcPuOl+Xjgq7cdp/u77b0g+WXVGhgriZiv/+3LEKYAayZlzuYyAEfuz6r+xMAFBS0tic/mWClaLAWIDEAgcChymtl9bL965Y/xZNQ8yUTVFOZADGN5Gscan/V5T26eVy+N2/UESEYgCk3vfSgz5cps9d/////+f//T5T+HwqE5uG5cLAUkGf////8prcw1z+65hh/P//s1pu+mOWXRzAyEOzkUpOU9T/t1McpVvmH5/9tolQAgAARChQBSoV0pU7zWWxvrFLDYxcT/ON3GlhmMkODZgMvwbHSoRVjMc0nnLqutZNPUksuoomR/pdReSRMloomJsiipaKBtMWpPd1/RpP1TJ5w1apbay8///1JJf/6Kv5iyJr/WaoqcyNvUkkbKR9SSkmpGykvUbKSdFjEaqN4IAcQBO1bZJWVaZ1ALuODaaa2o4ubBEOw8sK2GHaCrcfv/7cMQRAA1gzUfsoHCh3azo9rMQBsgyXuC02rMVYLDXuKk93GOq1WUp+ao82exgwoT8SQwpVklhr0mzspClaDqRCQFDRr+LAVjvgyRcWF/IhIC2tpFhVICb4FbCTxebMCMLfbWtKs9gWeWFL8KUuwgToWunMDIHzhEqd5scBJFUClJAXGVXQIeZkEMxCUZUgRPGKJMF4+RohKMQipBWMiLHT08mViGn0S6XCaMS6ZGJ0nWMSdZ0S8RU1SSWiixDjxe6nb/0n/0kjJL//0W////0v//6BtUAAgACggh1QNCluiGZ3VbBsMz5pu3p9XUJqcMRmpeR7impmf0pjSCxMOhgsDIcEpq2Y5CDQGnLAB5cSAYp7gGcxcBkdIAFLAKCUi5JCey+wGBgEAABgQAlo+zzMyYCgLAwWAz/+3LEMYAZJTcQ2dqAAr6lrLc1ggIxcDYicKyndTqWKXJMigWRh0/Ov68uB/ACgALAQ0TutGts4rSqNyIjvIIQQcgZDqf20n8AICCYi4wbNhdWkBg8BijDgt/6/9hS5YNDQuMXDIE7NT9RY3W4CPnxUPf/6f/85ZSwmkuCQiwdHmKRCMzEmhGgAKAgoVlQ6BVTAoUI1xUxYZNBHku2F4COJMBzaUquWTAghrBZMHZR1StBwEaWDtYbSBmHLlbYBEdFy7Eia5VdZlS8XSVI9jvu3KpJIO2qRrzcazhTa1AMR3wwiUq9sXXk/aXr6OlBP/+HK7v3XbZf+sb+cocjcsy1NIEFHWX09R+Ld9dG/tXNx+fuynv3tdhl9rfNfStf7/////0Ov/////52kYAAAzpYFdrWUeUrTWKTDP/7cMQHgBGtE0y9p4ASBCDnKY4kMgzFB01hCEMOGC8Y/K42qo2JoBGkiiSoxXK5mOFOk9Lynh9HMQYepTKKVXK5HMSHNSiZ2V0pVay7tatYL9OmSoWXTerVn4VT58z1rX///5YVzF1///KyWfMSujFuHEhr3WISLOFOmS+fP6P2GE+fLyu1CTqprVrQ53ZOrNdf98YIDAIJAG4YWKp6pUSxYc3GgGzqkbgpSKA4K2A2+HgEFk54ZrBkQkpwThkFj6rxIRsE4lx9y1KLNo1WZbVfN6rSbPQ0iXFMkRNPAs1t3X//5FBr//y5UMu3yIhUTM5fWNEJKKdkiREQqa6RChihFJLliEVNFRSSmVg2d9ZX//r9UsoshoKJkpttzsGiSl8O9XKeQu+S6oEbdhhhewYaiKsD90jsKFX/+3LEEgAKNJNDrRkQsTQU6XWDFh6bVa4EtQCAU4cdRb/5IrPTWSTt8W1WaLa3/eDgyRj5JLP8/X2fcEyP/V///1STgDQVlkllVvdGIMtR/qKGAtziMbgTFfINFHZG/mfXTvRSN1lgxQYuc6ynLHHMs71uSzKIiv31ItdRocF0p/MArv7Po+7V/q/+7pjk/1VMhEqW27TTb0X4gaIEyLqeI3lg0jNJKPpLo1mzYSS1E5aJ0JP6fEjSQVAWssSApI8pCh7FD/lSLR6GKK/rTrItAqGKQKPTHoYqx+v/WkxBTUUzLjEwMKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7cMRVA8mUSUGgvMGwAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqTEFNRTMuMTAwqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+3LEbQPAAAGkAAAAIAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqkxBTUUzLjEwMKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7cMRtg8AAAaQAAAAgAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqTEFNRTMuMTAwqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+3LEbQPAAAGkAAAAIAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqg==';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;