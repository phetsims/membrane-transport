/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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nLbgIdC4MiOCgFJZREu6shXqczW1crSdddLdnnZ1BbyuFDbqvtF3diMgf6PyGGpXFYlYAQkYAgMaDHjgVAKNUSLURMSNhI1RIpZsJGwkbslLlkphE60StIlLOvDrk7UXUc6NWi2JPlPNPT5TtT5LbLJTmnbLVLbLzWy1osokWNOuadIvKfNmCLWRhJQmJB0JAUku1RVLXkmZ4faPQRV7bbL/+3LEzYPMzfDgD/VHAWeKXAHf9EjdbbJImgABSiVExig787BzroMJkVcBvoraFIBG2YWhm0mg8AAwBgBXEsQU7ELWJVMep6JBTqRnWFpQp5SpEYIyQ25plZZNSeerhn/yUVk00gcNBUUFu3+LM1C7E0xBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7cMT/gBsJhtZPbMvBdpBYNZelplVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+3LEbQPAAAGkAAAAIAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7cMRtg8AAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+3LEbQPAAAGkAAAAIAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;