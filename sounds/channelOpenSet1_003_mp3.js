/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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6XSz13BCfiJV3Vq5m1SlRVuCBgOChYYU1CgLAS07xc6DZUJA2EpIsGg6SPKo///V/9Pq/b9r3AATVXCrajMTmSk8WJmvaQvwpQZotJzOcylElFhUK1akAGAceulZW6Vj4uk2xkXSaXhGjWqBBLA7IZNUnT61sBBCwP/7cMSgAArIpT2sMEmBShroMPSJ5kSx1nKOVjcdL7NHIvolchSkQ5RB4xnLY4ZV/evk1K+scT60MDjarkgepWgMt5CdiY6qH4FIVCox6GhOox6+Q8LBMvMAVf3dD/+uTEFNRTMuMTAwqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqEUPoDE4lWhjVSCkAFZqIpLnWjhy5eXIlBRaLU75XotFiUElkUTiTkdBVa1fmpGhLJV5n8FQCn5qPNInEnIwkxIsjAMejRVkW2cpIGTAKFa1CSRoTBK5b1TkW2W04kaH/+3LE2gAJvHEnpLBlwi+woeT2DiQwSWjRyyKq5KwVI0JgGWRx3ntXdFkW2WSsjAKoGWRzu04AiYT5Blklkc9fHoua3+ceWrz3x5q8rXIuRgls95NhJ0RQ4FRlGE/xdUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7cMTCA9UN/OakiMIIAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU=';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;