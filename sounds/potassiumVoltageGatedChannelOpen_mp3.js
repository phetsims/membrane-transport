/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;