/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7cMTyAAwVPPdHpKnSn6DX9Z0KrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqO51qTEFNRTMuMTAwqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+3LEboPAUAIADYAAIAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqg==';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;