/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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40HSMNufWkZFJpbc0ECpk9I8hSelYlAiMCc3FYyOh2a85PbfAfaye9zfrGYwzM4nL9r6qWx0lpBqz/30MKgMBharWAkf/5b/o9T+lciS3UswyCsqqo4ghxh1ihoKEix2QmBrOhAaXuZqgTFhZ0IgKZAhzWK0LYWbP//7cMSRgAutCUGniHPBTRUnNMGWiEx4Imi5jgjwiYUbgIsvhtQpn9wXKlYhUekezQEgWoargQVwkCsjCnqLQYkp0UY58Ig3MUhsFqjihOEAVoEwCQZa4tWIWuph0sNyN0hnwN5qaWc7oXawJzdipMwUFGoCVfA4vxhMQU1FMy4xMDCqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqakSJqGwqqGdBRhmbCoKYCNQEpSBlhQgFGM9QowEEAmoVVIMAtMGN9JmYwoCf0BASZiOGFXIMXVVYBAX8PY1P6pMwECH/+3LEywAJFK0rpgy04jW9ICQxDMFbH6r6qpBgI2OMeyr1YBNQqxqpbUBaqqlwMR3PagLgJKgEK1pcAgI1WMd2woCf1aFElVVVh8Xq7MzEzNqRhQ13WAl2QU/IKbFDKkxBTUUzLjEwMKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7cMS0g9Gp1POBiHgIAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo=';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;