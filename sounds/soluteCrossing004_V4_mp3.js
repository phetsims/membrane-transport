/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVWwm32SbbWgAHsHU8LmhpMhMn4hBOCxiYmgzwJVIJM6fNpVAERaqlXd6OYOZ26hmisGlSQgwd4CKiFW4I4M4I05zH85pAJEo2M8EZKkVbVKAv/7cMTegA5dkvZsvKvRuSSgNMSs/ojd8FDXWfDC9LAJkz0uyyYND3RKmVMko8kwlkzDQFStN0YhA5oUiDn2mLN8POQzquNTEY3GMT/GIxvbRTKGomNHWGU1omWDXPSRTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+3LEugDMsKTlp7H6MNIDwAHveExVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;