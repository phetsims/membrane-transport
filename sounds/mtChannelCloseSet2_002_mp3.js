/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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0vBpawapfYC/wonZrb3IGgkT9yo0OGpLQpl/5f3n5Tk4bHVWqpH1aqqJUKz2rBX+0FRE+sFgaDoNA0AAlSCiSSkZXKwpKdjpjjCck9mBwhzs4CoUKhQKMlssdcqCZVGYBYi6DI4SxFwVcrfOEdXlqbScSvxc6rJg/pGjUZB6dRrnmY1haEmpiYpFRJPXiqgeEgy3R0iUmpYBvNRJJzzXatb/+3LE7QARlY8rLjBtQc0YKLWEjefWAQU3OuK3v/+yzZRdH/PziU4lziW/8uSLHWjO+rnKNmt7s51ySeukilnSVcLGE5AiWovzEi2mWo7S1XUur/o7pvWRX6/WvyCht+bW/eV+2i23jUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVWwW/2pZG21t6eLNoQGJANPZ9PQpFY4Cxw7D1XYLf/7cMT/gA5tR0WnmHLy5TRhabYaYZkwUEOoUEHGFdnZylw2OqzqxkfytRWM/SVDPSXqVH8pUflyo4iweILLoLUR2lR2Mj3Lf6sZSt1HAMJsVUeUYLCI4oSAqf+POmXdTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+3LEoIHMgWsVRIyvsAsAQAHAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;