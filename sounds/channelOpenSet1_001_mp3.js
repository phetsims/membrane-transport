/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,//uwxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAFAAAOsAAzMzMzMzMzMzMzMzMzMzMzMzMzZmZmZmZmZmZmZmZmZmZmZmZmZmaZmZmZmZmZmZmZmZmZmZmZmZmZmczMzMzMzMzMzMzMzMzMzMzMzMzM//////////////////////////8AAAA8TEFNRTMuMTAwAc0AAAAAAAAAABTAJAVcQQAAwAAADrCElaLt9JYABZGyou870ABURJMSECLADt9FYrIxWKxWKycG9UCgoFAoFBIKDN84EAGgNBEJihiI7EsSzM/+i8Syef/RylJocCQJAkEwwWP3uvMxLEs/wliWJZPP7LGRDAAAIIjkzSlLzMzt215gYGCxYsWOLD9evXr15mZmZMJBMMDAwMFh4fr169evXr15gYGBgYGBgsWL169evXr168mGBgYGB4cGBgJYliWJYlmZmZr1iw4MDAwPHNpSZm9216w4MDAwMDA8WH69e/e7a9eeHBgYGCxYsWL14QEBAIBAIEAAH+YPimPFMZZDaZ8hT8nMoBsMbSHMbRtNg3JoofMURpBQ/lcUlYrfGjDgKTG0VTWqLzKdam0WZRmEoGmToDmUxgGlqWmlvfFid38k1NFCsUjHcszN83zLsUytajWopjKeLjWu8mcUtPJ5KZenuaKnSY6geZmG0ZmGYcXLWVlOZTlOa1FMa1LXI3/kkmk3mVQpGZo7mHIcmLocmVQYGC4PlZTGtZTGtRTmtRTlgp/////8wpA8ygFIsA+YUgKVhQYUhyBhTMpin//KymKymLBTf/////mM4rmHYOmB4AlYVGB4HmB4AmHQOCIATA8ATFYVysVzFYVzFYVvMVxXKxXKxX////////MHAA9dgkD5gABwkAAkAf+YOgeu7ywK3lYr/5WK//5WK//////////5cgFBOXIUQTbMEwTMEwTLAJgoJ///LlqIlgKSsbTCkKfLA2lYUf/+YUhT5YChaKhnZhAAACpr1OAoFDIAMBABM3rcxe8ThKfMLnQ0AQDFA0MdCgyyTzDgABRrMP/7ssQXAB7Zo1f9x4AFibPn8d3mYIhEwUFDAIwGjAEOAGC0CHk7a1YrGloXmlpQ5oJISReX+vL37Svfq9Xq43x5hqFe7ONqVn////6t/V7tWdX9ralZ3SHoeSNp6HtPQxfaWntLS0d0rzeJwb5O2oWB0759q9WE4dG+r3avV7TyQknXyQNK+hyGdfQxDyTIahnXu09DUO59unRx9XnG6alZ1eTjtZwK51z5dq9Wn2fKsVxIl4tCRFmhy8SQsuSflmWvQ9D0PCGCaL5ZBDBNAMhICSNLQh6+vEgJIST9poCQAMAGAiYpA2Ypm8YKBoYaDOa0kWYpG+Z8JgdcooYnHCVl6ZFhuYbimWDDMUyLKxvMbwbKxTAIbmS45GA45mORLlY5GJ6CGS6CFgKjCovTNhoxsbQJFY0WBoADRYGjGxsBbgCbyyCBNAggRM2NyyZWNlkDGjcxo3QIgI0KxsBNpWblgbPCGjixo1MaAI0cUpAGLQJmNm4BGywbmNGxt40ZubgI2LA2omowZ8aiSiRnnAw8zjgeOgHOOJAODnis8GnqJlg4HPA08GnA59AMVnoBlE/Bz/g55RlAIgSQJFkiyaBIskgQ8smgQQIFkUCPoEfQJIEUCXoE/LBxYPKz1EkAyAVRj0A5YOUSLB6iZYOLB6jCARRn1Egc+gGKzis9RkrPUYUS9RNAN//6jKjKjHqMeon/qJeol//6jHqMKMf6iXqMKJIBlE1E1EvUTUZ/1GFE1Ev9RlRj0A6AX0AqiX/6iars2utISgAJk4VmcrgbhJx3BwmbpUcrZh7nEGb08dRiRtZrmB16a8OZXUDTLWOoxIzmlv/7ssQZACPNi0OOancElbRpfb1g2DJ5yM5k4w0NwAGywGyyJWNgCGkCIBDQOD5g8HIBjEYOMRA8sF0w8mDD4fMPVEw81jDwf8zRoBNTNmgFt9AkWTKz5nj3mePmePedw+Z88Z8+WD5WaKzRmzSBEskgTLIlkvQI/6jAOPKMoBPUTQDoBkAyjCjBYHIBFGf9AmgQQIIEUCSBBAmgT8sh5ZNAkgSQIBeAM2DZEGyMGyIXkF5fheYNkBeQXiF4BeIXng2RC8gvGDZP/C8/C8AbIheINlheANkA2QF4heAXl/wvH8PLDyh5A8sPOHmDzh5w8wecPKHkDzB5w8oeQPJw8+FkeMjsquiACUik4dAWGY0KAc2QCNVljF0s3kgOFKh58ZOwYGeFcRkipn4gVdn8KGZJGgXtTOIh9yPRaYs6jiWKuWkIrANBU4k4cF/BAFAL4KCj41R/1TI/NVBwVTo+yZ/WTMlBoS8BXEwgLTIjJsezl8nyRCelClER8/fFiKIDZU2ffNiXSolnYGk+XsQep83x9hr5e+CISbIqhEb3wZ2hNUKRGLTFpk2XzfN82d+zn2dPi+Pvm+b5s7fJnTOXybK+X++D4/7OnwZyzl82cvm+DOmc+zhnTOXwfH0RQIlnD5vg+DO0CgNJnLOPRCfP3zfJ8HyRCfF8vfFnDO2c++SbCIT4s6RGRBfItMztEV8GdM6fB8WdPi+DOvfB8nwZ16ITOnz98PfCwAAAABoAKGlvAho2dDrINLs2GgemYZjXWYkTz9Q4YIwskq0ZHGBX6ZgBjBgE0MTw7NyswTygUQpmYarIksYR6FhkFirgETMIdAaqiv/7ssQmACb93zcM5VfERTRm/aw9cKVrCOSTqk0lE8U53VSVBCJC4W5FDSJAv3OlyENYGFUzLMdZFEyTzENHQRLURBAIIFBQIw5YxdIxCREAZJwCWLjIATFKQnkRKkiUIHRWQaAniSglQAEDoTBVlDgYiIFiM2YtyYIwkagcueeKgSfSCEyiV6lnWmgAdMFBVhjFF9BAwOCZ0CQi5Wy1TevCxFLVGlht5Q5kLEn2fyXvFBi32loqRV3H0UPkCwTSar8wp5YJg97GHMSv1IOebn13YdZ/6UFsPBCyEGl0jALQghQC2IwoBUVCmZ/KBTYUQMh4X7cjBYL/KBTf/KBTcKEtUTLuqoRKIAuTAkgZ98beYcEgmobeQDlZm9xuQxgxRlVBsSgUqfsm5Jsqevny6ay0S6pkKsgxgR+d8tS19YrOWctdbsptFp5NIMsDBrcWNA0Sf9CS/PgHMhaNOZJnCH8IanS2j0pUfQOY1xCWlJLR+iSj9XSicm5XPzlNFQqZVZbVbNdWxH0I5opunCuidKMQk4VSSlMGajEOQ6cYQN5wVyednKhpyshzKHl9OQNUXcFSeLcrXkc5VhyL6qBXi4uBblGXE9jWG6eCGuA3jzEJQKia2BQopNkpaI6tZYWlKs7e0fL5OTDDBUiqRRcmNZURdkGhI+jnH6X5RnS1qnH/kZm2MwtTtWt0fUqeZoaDu/6W1QAAsBJIMec1EoOIgJEZYWZ88ah+anMZL+BPZorBt1J3BDX5MwNBo0KFoDl8rkV2oQpJkrBojE2uLXSwEjjODNNwysxD0MWGzCaAhZsuYXPL2F70Jidi84YnW2StMEIxGf/7ssQwA+eptttNZwvIAAA0gAAABADIDZhH0GMBoy8iDZYIQPHbDOAq8DEHjpwsmfntNDzuuU1lrS5UMhAUVUMiR3VscuIOipUIAiqB0wqFLxY7THvpGAhcQXMWCoIEh1NF/ubK2lLybu/kbjEvnL9aJUMHQE96uUekZU3FyKfa7HpXSUcOw0+0dklDWhllSwK2m7PS+zguE0lVZBCOiHRIzq2NbdiA3qWBRmQ5Jlrka+/EbjjcV9CrBUqEhXbXH/gxVVBEOgSPU0Zu2aBodhqIx2ORucnpbGojHqCblEvkEDM5XkwlurxY1qta7QUNDSX1VUxBTUUzLjEw
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;