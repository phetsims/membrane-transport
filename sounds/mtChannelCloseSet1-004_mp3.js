/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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tLdTPJdWmvKs4tFvb7cTa9/RMvrw4c3Y/dqk5v+nspV31z8hM6+T9sMKvs31Sw1uUWZ1IykURoRxy3juDZUK509EJaUY2dTNESImdg9c8Yb/+3LEo4ALlRUXoIxVQXibImgQjTjRBgbOrsZr9lSSmORnp8ecWvNyp5EMcTI4DFhTz7KiVzzCPSiQEQMjxcXOH+5HNCzIm7JNqKBkThGIyHKZIRdkdjUafClz96R01Bp2Cc2+L/JScT/9W9wTFVt50u63y21VavB5SNElGDWXK9Xbp3y5XHZ6lFiM5sb/D6tXOEK4gXHUOiojJxWhGkaXdIrHoRvNBEbIxSTk8zapzWLLdmfn1bNjV66NLymUtK9fPinKWR/N1i9d/mmNl+NZbTkamdy6c+sLnKexFVb6mzs1kiE4OHOJPRruDBlaWDtYsaCxDu/aiEyErqkBgH56t9m4kpG/MsK55aAFZUBDc2iOlVKKVM5xaPNhnopOVIJZzhONZxM6SxXHFNLfzs85NpmZxdYSnTrLRf/7cMTYgA143Q0hmHgKAbHhqDSO0a2uKs1EjkxeW3/nZ7om8lX1FLCVetKTznS2t2p87nFletNS8tztOLSk7WpIix3JMtrRyco18Oo1gYkKTAVCimbMahmIxLAgZBnUw0BhD22h0ZrGR27HKMfeGFMmcqVVTIGMy5EKWq/VTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVWMxRBAotqNwxqTUZjaiW1ztWGsNZD6TBUaGrOTXL7/+3LE9AASacULRJh7SmE/4GRjDvmTUmhrP5fVqTLJ+UyaOTVDWfrDVGakyzig0NY5NaX8wMg4lDtVLblDIOWBQqLCweNBQPBUz9sCkQkRWGQUBoCh0YsrwmGQl//6lUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7cMShg8zpJvOhjFPAAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU=';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;