/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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su1SMESMhJE1JIpKjDtKny///3ktYl4r783IfPW9tdq8z5nzn1ZS7O1yL6Rc9XLd6nPP/7/u7O2VUJa25P+f/ojoDbwzPuRasRlR2vlOxTyR9etUUywQ8ZgmwYPBgZksgami8YXAKaEpwZSk0FEHOdvBNuQaNDCNNP/7cMT5gBVpfy1NPRUxshnmKYSKnrKDM7CcMQ0lNvj3NgGTGT45VwFAsyZnNwK1cGDFIQQuwzBUajpgwinA3MwIBeyG2Cv71rNZ6Vq4ujAvkSKdwsQkqoq1J8cySbXLNdr9XcRDhx4sBgaAxMRA1H9IVdeHaJaVSp/9FRVYa+HS2EhzSPfVAAAZOSWS4CoDXDpskqASdsQrxejlUNAZMiBRgFvlipYsV7A0RJEv+5508eOr/1L/I///kf//062SRkqkmrO0/jA2bOuzCoooNDWBk1PmCjT/SvM0QyoytTHzIQMyMOQtYw5SRTDeGYOBvU34cjZonMzAYyCDzEwUQcaW+0Aww8zOWRLZYSvhpbXG/bVrzgtybk3d2IHk0ilsalIgiALmHjhYVINi1i/+PixUo8GwgmHLtMT/+3LE/4OW+aL+bujPUlCS3c3dpahMWrfRKD1/4j+JqDg6LHHT//yg8VEIs4mLVpiZ/4mJmJ///7NFhBISRkpfxH9qUSHQDgnBoI44fTL8/7CoOiAI4it//w9MSitNX///9qSMTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7cMTsAAbcJQtGPMazLLsLse4hcFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU=';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;