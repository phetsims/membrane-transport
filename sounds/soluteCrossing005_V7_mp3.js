/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,//twxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAMAAAP6wAVFRUVFRUVFSoqKioqKioqQEBAQEBAQEBVVVVVVVVVVVVqampqampqaoCAgICAgICAlZWVlZWVlZWVqqqqqqqqqqrAwMDAwMDAwNXV1dXV1dXV1erq6urq6urq//////////8AAAA8TEFNRTMuMTAwAc0AAAAAAAAAABRgJAUFQgAAYAAAD+vVKAkzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7cMQAAAAAAaQUAAAg+xNvaybR4gAASAjxYNQIMB8NtnEehhLQgDUADhuwWDINuwb5c/EbErb345yGxL/3xlsS5v/u3Nzzygf/0fT//6Pfv//RpeBgOBms1m9ZLXq91wADr1tko/PxnOVVMAsAUCEArMAHADjlVZH8/ygjoBQASYDgAyGACgJhgL4CGd7jMcmHYmTRbkOACzAQQAkSAAzfBQiMaQ2cMBXMBYAgEgDuUY3YkhkkgsGB4D2FwA1MWkKAPM/BgwBeGFuCYYCoTYWBwfV2ZdJrbyQHbMMUDIwTAHzAZAQMEkD4wSAL2stu4jsSt/6OMSqUAICt52GgYA9fL36gCz9BZrcl89UlHzEZceJwBIIvbmMakUv3u/lnlcjEslctprGH/emqTXO71x+5RDE/zGnp8t//+3LEcoAeGSFVuf8gGkKSZk+7kABw/////72+c3UyFjAACXNTMkPzDoSzdopwEZxhoWZ5gFRi0LpsX7puYhJgrKZ5vWRnqERn8kxtqMA6C5nQSDAjAcfwf0DBT8uTqGDxLBpwBHXrCS9EXZu5krSzjTsPLLWryuQv1H4FrX6OzKf1LcMrXauVa9h3eu6oP3PW7l1ATOE1sDaFdzDqEmyS8LkDpIyxXf0OF0hUyh7uv+KqgAGtNySW8v87BhQWKbgs9vmYBprigsNKNoOoolQIdb6bc1xMfMxC2OHqBFYEm00KIjcdClEdpnorwlUe/y56RyFqdFKmSpMcQEykk1Wl9g+Sl0/jJg5XZA9Nkd7u5YhCMjuDqjK9TI5VfZl7L//0skU5jsOOCJGG95sBtARLccklt3W47iXvp//7cMREAg+db1lNLFGxuJqsNrDwBmNZtBeEDoTDQGHy0Q0Dim3vSeFBJMQTa6HUPx7ZSW7jRu3pj3hmsw6h4y//jeub/P1W2Ma/+Yv3vVPnGJfLjF9ajYrrOMfXt4VaybzMTCwBI3qKjHDWEhrl31b6kGblXbEOlQAAAA45ZZLt9vtbdt/woQZaAwQI11Vgx0C+gu45KjoQPU0zXzUBUIATatBogLNDKQACfWZEqbA6AYLCqcweYrCPBdpD1I1uEOrmXNEnba1NxlrcvnaaE8cqvaUNZqyKo4yYzSWeNyhuHZTAr60rDY/D0tr0M4/kYtxOIyqCrtqxe/G1ymu/z7tDSVyr1/zKmaX8r87+pfsYK/mJAFvcuttvYs7QyGloE44BLkvMkqDlRcUiq6Glz0tkpXqIhMSBiqT/+3LEYIATUMFXuZyAEZSTK+uw8AbGXfa86d+XfZdtV/F7bNJCrqm5LSM9axt3+Nbk+8Vlr4HEixs+J0lhcihY08LEWFBYMlhciV2Eu5n+r62f7U2AAG0nZHL2qcRkkUfElo4QwRYqlgtxTQvgNDu2sNSQwDCAfc8McllhLHcgWH00IRrX1Pdyc1fW5zps00Xl3zNsYdlPvieIY1jVk2nllI2XnhRDhZA9pr3eq9qF31b+cJlGpFkdArOMSoAAAAWyS23bf/XUXAfh0h5RR0cOGBS55zmmEyPgAL40RhNUe7WoggTMItF6GcgeJoJ0MIsFHGAYECMdYuJBuXDQ8wp9NRPhlrNnsbRljpy5yGwOBIF0tegVrrvOcwyHKfKq6kc3Ot62s9ypOsMcqKS+WTF6kuS6GHYjdfW86v/7cMRzAA0IwVVVlYAyPxeqdzOQAnMebz3/0lsCoGf6fFWf/5Rn6AAAABG4jpLa2wAAGygjHhIzBZ1zGIrjJWTjCBZDU0Ujca+T88UzVfQDlSKjIC5TBfTzZsezFkXDmdADTETDZY9DP8XDxa0kNTma8ANY2pGhtBmIsZYAA4YMUGxYrDh4wkQLqIbAkkkgUCASFAoGEIGKA4EAQgWQbJQRaz1wpMaWtMTCDAYuk+7VW1e1K523MpI3D8WvTkRn401qrVdKktWu48/HHDWqodOyGXajv4sdwQZUlFaq0en//UAAOYa5iRjkKwmNyGEaGxSBiklJmE6fAZpzRRq2w+GtSkOcLR8pqUEIHK+Daa0x8JjajiGo6b6YG4nhpPjVGQQDccBcAOh5ydkGaDiLns00bjKQrMEDUWH/+3LEiQAXTK0pud2AA1MYowc9wADhi0RGLRcYIC5AIxI8GDQWDhcYBASBNCkMBRgcBAwApJKXpNl1Fcl1XYe6GoPL9MlhTXmupWP7D9eggVyZiLv9LXPe6QQ/K7kVllFN0Mrt3aDd63Sco4p3KxT8zpNUmBoG1hgeEiRcWB8dDx8CsfYPIOWwzQfCwQQd/CGj9KoAAAAJKybTbW2SW3bfghIg0uslDikYDTAciAZwwQc1JswZAcbB2AoIBAVGESlO+cR5GkKh5EpdxLwDvFniJKmjVhUzIVmqqoZtuicDovWoaXBVzAEBQ0ztWN15bTtCbPTxi81aBYjMXLXO583S37d25TZXveL2T3qevl7sOrgZlJKEHi03X1OI/p4ACtuW2SdRh/jGh6mZMtjIwWH1tA6LOVPK+jTV///7cMRTgBEwl0e5rAARfxkp67DwBqLVGNLC6z2OLI04jTWZatuNx/ibwe1Z7fnzb1WNW0vrEz5sxb1nxjPi+r7xs+2/fO9ff3qtc4xBKsxdDGPq/+z/+urAAG05LHJ462VVXFR5t6woRfyZQZ9/iwptpkCRpWHcdOIy9ky1SGyLUGe2pU+tLOX1bCOGZ15P9/56ksr32eDF4GSdLQExZf+7tFyJtH9av/zUAADIqNpvDRJpQqSox0MTRrhlyQ0AR3O6ghZhUw8MgILAcFEwy4B3hoUZLURTYsiVJzrSop0j3zl9g/Jdtz1pBzScmZobieWG8t9cq8Tnro5r4w+eIIexP4x54kVW4wKpCAbYlX/yJZWQAKknJHL3YpSEcgtIXTYia2qHodh/UG08Z5a1uCYtVYLwFA+C2VH/+3LEcIAKNKdJTCzNcaEVpummGd6I9i2JslVqZeVy9ZLIZL5cpDMGHH0oStr23/+us8fagUQMYbF/+9qFXTYuooFbcrkl7e+pRPPi600FBK1yEFhvChZbdatyO0VxtvGhehFuBHruST6z4nsTvs4gqCeajI8E8U4Nit33qe9iL2AFpw+RR/RYlX/0q+lMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVEAGdONtu+h0nXKFHYROAUTtEohq79FoKtgEf0dpWykl4ody1ARvBdYdy1sT4nsS7DtuTUGBlPJfzAoaX13b/arXHdAogb72+kXSr/3hNV4kChsIOw2KBxI6yExSkoChcYcdA7xgVgkmlRZKR0g8Ja0jk/0SdbOkbEQNNCITJuiCpNv/7cMSmAAo8kT9MHHExNJBnaYSKHpbVc5C7bClr/RJVdvXxIYVAwnpQ1jneUoFXY9v1eanRJ0coaodBF1ZqGbUTqR2FqX/l5dIgYZ4BXMBLZszy2PhiWBtqFq4Q2VlFTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQAAi5T9pigEpJlmaRkaABkQgJosTZiWTxgyW5oodJgso5wA+JqQIJlmhBoSYxguVZnwZ4KMAxVHIfhDIjQlCNTDUBT1KgKRyRCBwUXeJxnhYjLYZl0Rd2zVpZqHr/xuCjCtmdVSnqsbjRj/X/WNVzz78pZQ7zX/+3LE0wJJlG0vTDzKsfusYyWkjlb/XP79IMzSwdBU9czG2DkhyLgI86tR5oxKYtdipV6hZguAApmjNEAf7UXAQckEvSLpcoWZrU/+vf/b1Xf7ffrd////S2e1qfX9SkxBTUUzLjEwMKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqgAJf//drbLecE5oakvOb3BAahj8ZFCqYXggByQNsGqiFYwm5UkwWSY+l60FW6BXCcaPuTKH6oaWmjshlQ6rGjBgYwFStP/7cMTNgBLk+OBu5G8AoQEiPYEEBr2BjAQWkZHyyWGvsFBo4zKygo6MsP/sv/+X6hgTl9lkoRxhSyuR8pMt//7k1/sn/6tD/JgoIELGNWUMDqGXmoYE5H2UtZSFLTVVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+3LEtIPRxZq9ruRl6AAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;