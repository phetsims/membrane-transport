/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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rdlzD8XXuI5tS5krPkz39+2uyd5f/c5TWLv/SvDVaZppQrqm59sVXa2bguJ1qRq3EzgQnheO/Xw8HeWQN2oHrS5RJvisUO31xyf4QpF4gkGwbRNgUF4jFzeqqNrN8JsauctVXZbSL+W5+p90zPOcJX2v6ncvve3v/f/7cMSCAAopdzWgiHm5VJvicDCPDd//n9d/NNrsE1F2JxtFuHSh1V1Kcb/jHG9jq5bMWqqq/+qlV2dSn8CrthCEXyE9tVVVJV+quxRmbVSqln///sdY/bpRV51SUMKDolc1JIjKx50QwVhqdBoqddBUREcFSp3//qPVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVcAA905kZf//+rq7qebGV0smknU4Thm5KMk0k1Uk1G3NRWWVSTUnCef/+3LEwIAMdFMJIYhySXckoLQwj4D/JRkmksqsqkmovCD2URCRDIeGzpQjJD5KRFSxY6URsPZaViknU4b7urq4bmyjV1OG5n///////upXVw3Nu4a5EhLHThwvtWqulUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7cMSmg84xopbAgSnoAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU=';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;