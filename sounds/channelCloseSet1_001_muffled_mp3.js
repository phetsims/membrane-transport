/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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qqqqqlBGGJTbcmCus3F2rcq1Ywss1NKpZyhTVMKG1r98sM2eRZlWQtKOOUfDgxhhJ0tUcEP8Y7QZ+XB8LjBPoVjNfc2qMDDA8ILxnC0MThzxR40x5aDyUyyrQ7jzXI5ZuYkeDhlpwLfuTuCL+T7ewxlGRGrTckkvh//7cMTkAw+kxuJuYWfBvzQejPMKGkoepVeMbNWaqq/6qu3r+uGY/ichTRMXk/MgYv5S1ZDPN+Y0K6lKVjATzP/+UspcrI6mN0egCXm/M6t/1lmfm+pZhRYGga8RFQ7VTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+3LEzIANsZ8HQZhouUKvYWgwiw5VVVVVVVVVVVVVVVVVVVVVVdvtvtsLsBIAIIqIZIBmEJOMVMnkSkijL4dYQHDEQYSBCzCaFn/pULCoqKiooLEjSxYW///1s/s8WUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7cMSKA8cYNqumPMawAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU=';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;