/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7cMS5g9LtbpstGHOAAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU=';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;