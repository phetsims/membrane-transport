/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7cMRtg8AAAaQAAAAgAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqTEFNRTMuMTAwqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+3LEbQPAAAGkAAAAIAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqg==';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;