/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7cMRtg8AAAaQAAAAgAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqTEFNRTMuMTAwqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+3LEbQPAAAGkAAAAIAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqkxBTUUzLjEwMKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7cMRtg8AAAaQAAAAgAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo=';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;