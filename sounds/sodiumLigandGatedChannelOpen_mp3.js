/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;