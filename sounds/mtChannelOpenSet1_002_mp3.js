/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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XemRRyK1q9IdWCoalgVDSAVBYGgafs9fZ/2ffZ/cj6dmhUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQlRLlU29cJkJ1Joqqq68UuH7NsesY6dVdj1/UtVVjqlGZlL/PrN/6rS+qTColDSzq+Ig6mJg6JQVO4lGHgaeWHnhLqDpUNCJ0RB0FoKljzPlSwdWGiwNHs9K/3iWR63/+3LEeIAIWIMdRATJ4LsAZLwAjATbiwB8dC3mTBQQMEDBy/////8yMpZLmTWWyoZNZLKhkZLLLLP///+iKip7GKYoIGCB1RFlqKplvJVVVRQmmkDiLBNNFSyWklVEWUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7cMTCAgwktQWAhGABHqQVZAGKd1VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU=';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;